name: CreateAMI
#workflow will run after the pull request is merged
on:
  push:
    branches:
    - main
jobs:
  packer_build:

    runs-on: ubuntu-latest

    env:
      CreateAMI: "true"
      
    permissions:
      id-token: write
      contents: read
      
    steps:
    - uses: actions/checkout@v3

    - name: Install PostgreSQL
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql postgresql-contrib
    - name: Start PostgreSQL service
      run: sudo service postgresql start

    - name: Wait for PostgreSQL to start
      run: |
         timeout 5 bash -c '
           until sudo -u postgres psql -c "\\l" &>/dev/null; do
            sleep 1
          done
         '
    - name: Check PostgreSQL status
      run: sudo service postgresql status

      
    - name: Create PostgreSQL user and database
      run: |
        echo "ALTER USER postgres WITH ENCRYPTED PASSWORD 'hello';" | sudo -u postgres psql
  
    - name: Install Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'  # Replace with your desired Python version

    - name: Install pip dependencies
      run: |
        pip install -r requirements.txt

    - name: List PostgreSQL databases
      run: |
        sudo -u postgres psql -l

        
    - name: Run FastAPI application
      run: python main.py & 


    - name: Wait for FastAPI to start
      run: |
        python test.py

    - name: Python dependencies installed
      uses: actions/setup-python@v3
      with:
        python-version: 3.9

    - name: Configuring AWS Credentials for dev
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
        aws-region: us-east-1

    - name: Packer Init
      run: packer init .

    - name: Build AMI
      working-directory: ${{github.workspace}}
      run: zip -r webapp.zip ./* && packer build -var "aws_region=${{secrets.AWS_REGION}}" -var "source_ami=${{secrets.SOURCE_AMI}}" -var "ami_region=${{secrets.AMI_REGION}}" -var "ssh_username=${{secrets.SSH_USER}}" -var "ami_user=${{secrets.AMI_USER}}" ami.aws-debian.pkr.hcl

        - name: Configure AWS Credentials for demo
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_DEMO_ACCESS_KEY}}
        aws-secret-access-key: ${{ secrets.AWS_DEMO_SECRET_KEY}}
        aws-region: ${{ secrets.AWS_REGION }}
                      
    - name: Create Launch Template Version
      run: |
        AWS_DEMO_LAUNCH_TEMPLATE=$(aws ssm get-parameter --name "LaunchTemplateId" --query "Parameter.Value" --output text)
        latest_ami_id=$(aws ec2 describe-images --filters "Name=name,Values=cye6225_2023_*" --query 'Images | sort_by(@, &CreationDate) | [-1].ImageId' --output text)
        aws ec2 create-launch-template-version --launch-template-id $AWS_DEMO_LAUNCH_TEMPLATE --source-version latest --version-description "Updated with latest AMI" --launch-template-data "{ \"imageId\": \"$latest_ami_id\" }"

    - name: Issue Instance Refresh
      run: |
        AWS_DEMO_AUTO_SCALING_GROUP=$(aws ssm get-parameter --name "AutoScalingGroupName" --query "Parameter.Value" --output text)
        aws autoscaling start-instance-refresh --auto-scaling-group-name $AWS_DEMO_AUTO_SCALING_GROUP
